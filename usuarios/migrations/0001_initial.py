# Generated by Django 5.0.2 on 2025-06-24 15:59

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('empresas', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CodigoTurno',
            fields=[
                ('id_codigo_turnos', models.AutoField(primary_key=True, serialize=False)),
                ('letra_turno', models.CharField(max_length=10)),
                ('tipo', models.CharField(choices=[('N', 'Normal'), ('D', 'Descanso')], default='N', max_length=1)),
                ('hora_inicio', models.TimeField(blank=True, null=True)),
                ('hora_final', models.TimeField(blank=True, null=True)),
                ('estado_codigo', models.IntegerField(default=1)),
            ],
            options={
                'verbose_name': 'Código de Turno',
                'verbose_name_plural': 'Códigos de Turnos',
            },
        ),
        migrations.CreateModel(
            name='Rol',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50, unique=True)),
                ('descripcion', models.TextField(blank=True)),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('activo', models.BooleanField(default=True)),
                ('permisos', models.ManyToManyField(blank=True, to='auth.permission')),
            ],
            options={
                'verbose_name': 'Rol',
                'verbose_name_plural': 'Roles',
            },
        ),
        migrations.CreateModel(
            name='Tercero',
            fields=[
                ('id_tercero', models.AutoField(primary_key=True, serialize=False)),
                ('documento', models.CharField(error_messages={'unique': 'Ya existe un tercero con este documento.'}, max_length=20, unique=True)),
                ('nombre_tercero', models.CharField(max_length=200)),
                ('apellido_tercero', models.CharField(max_length=200)),
                ('correo_tercero', models.EmailField(max_length=300)),
                ('estado_tercero', models.IntegerField(default=1)),
                ('cargo', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='terceros', to='empresas.cargo')),
                ('centro_operativo', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='terceros', to='empresas.centrooperativo', verbose_name='Centro Operativo')),
            ],
            options={
                'verbose_name': 'Tercero',
                'verbose_name_plural': 'Terceros',
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nombre_usuario', models.CharField(max_length=200)),
                ('estado', models.BooleanField(default=True)),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True)),
                ('cargo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='empresas.cargo')),
                ('centro_operativo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='empresas.centrooperativo')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('tercero', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='usuarios.tercero')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'db_table': 'usuarios_usuario',
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
