"""
Django settings for horas_sistema project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from datetime import timedelta


# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
LOGS_DIR = BASE_DIR / 'logs'
BACKUP_DIR = BASE_DIR / 'backups'

# Ensure directories exist
for directory in [LOGS_DIR, BACKUP_DIR]:
    directory.mkdir(parents=True, exist_ok=True)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = ['*']

# Database Configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME', 'horassistema'),
        'USER': os.getenv('DB_USER', 'root'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'root'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '3306'),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        }
    }
}

# Cache Configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'django_cache',
        'TIMEOUT': 300,
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
            'CULL_FREQUENCY': 3,
        }
    }
}

# Logging Configuration 
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'db_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': str(LOGS_DIR / 'db.log'),
            'formatter': 'verbose',
        }
    },
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        }
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['db_file'],
            'level': 'DEBUG',
            'propagate': False,
        }
    }
}

# Database Backup Settings
DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': str(BACKUP_DIR)}
DBBACKUP_DATE_FORMAT = '%Y-%m-%d-%H%M%S'
DBBACKUP_CLEANUP_KEEP = 5  # Keep last 5 backups

# Database Constraints
DB_CONSTRAINTS = {
    'MAX_STRING_LENGTH': 255,
    'MAX_TEXT_LENGTH': 65535,
    'MAX_UPLOAD_SIZE': 5242880,  # 5MB
}


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'drf_yasg',
    'usuarios',
    'empresas',
    'programacion_models',
    'programacion_turnos',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'programacion_turnos.middleware.RequestMiddleware',  # Middleware para bitácora
]

ROOT_URLCONF = 'horas_sistema.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # This should include your admin templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'horas_sistema.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Migration settings
#MIGRATION_MODULES = {
#    'usuarios': 'usuarios.migrations',
#    'empresas': 'empresas.migrations',
#}

# Configuración de autenticación
AUTH_USER_MODEL = 'usuarios.Usuario'

# Database migration locking
DATABASES['default']['ATOMIC_REQUESTS'] = True

# Internationalization (actualizar para español)
LANGUAGE_CODE = 'es-co'
TIME_ZONE = 'America/Bogota'

USE_I18N = True

USE_TZ = False

# Configuración de formato de hora (formato militar de 24 horas)
TIME_FORMAT = 'H:i'  # Formato de 24 horas
TIME_INPUT_FORMATS = [
    '%H:%M',  # 24 horas
    '%H:%M:%S',  # 24 horas con segundos
    '%I:%M %p',  # 12 horas con AM/PM (para compatibilidad)
    '%I:%M:%S %p',  # 12 horas con segundos y AM/PM
]

# Configuración de formato de fecha y hora
DATETIME_FORMAT = 'd/m/Y H:i'
DATETIME_INPUT_FORMATS = [
    '%d/%m/%Y %H:%M',
    '%Y-%m-%d %H:%M:%S',
    '%d/%m/%Y %I:%M %p',
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static'
MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# Configuración de CORS
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# Configuración de REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.UserRateThrottle',
        'rest_framework.throttling.AnonRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '1000/day',  # Ajusta según lo necesario
        'anon': '100/day'    # Ajusta según lo necesario
    }
    # Con esto, se limita la cantidad de peticiones que pueden realizar usuarios autenticados y anónimos.
}

# Configuración de JWT
#tiempo de vida del token de sesion
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
}

# ========== PERSONALIZACIÓN DEL ADMIN ==========
# Títulos personalizados del admin
ADMIN_SITE_HEADER = "Sistema de Gestión de Turnos REGENCY"
ADMIN_SITE_TITLE = "Panel de Control REGENCY"
ADMIN_INDEX_TITLE = "Dashboard Principal"

# Configuración de archivos estáticos personalizados
STATICFILES_DIRS = [
    BASE_DIR / 'static_custom',
]

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Configuración de LOGIN/LOGOUT
LOGIN_URL = '/admin/login/'
LOGOUT_URL = '/admin/logout/'
LOGIN_REDIRECT_URL = '/admin/'
LOGOUT_REDIRECT_URL = '/admin/login/'

