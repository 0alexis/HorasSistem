#!/usr/bin/env python3
"""
Script de prueba para el formato militar en c√≥digos de turno
"""

import re
from datetime import datetime
import json

def validar_hora_militar(hora_str):
    """
    Validar y corregir formato de hora militar (00:00 a 23:59)
    """
    if not hora_str:
        return None
    
    # Convertir de formato 12 horas a militar si es necesario
    if 'AM' in hora_str or 'PM' in hora_str:
        try:
            # Parsear el tiempo en formato 12 horas
            tiempo_obj = datetime.strptime(hora_str, '%I:%M %p')
            # Convertir a formato militar
            hora_str = tiempo_obj.strftime('%H:%M')
            print(f"üîÑ Convertido: {hora_str}")
        except Exception as e:
            print(f"‚ùå Error al convertir: {e}")
            return None
    
    # Validar formato militar HH:MM con regex espec√≠fico
    regex_militar = re.compile(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$')
    
    if regex_militar.match(hora_str):
        try:
            horas, minutos = hora_str.split(':')
            hora_num = int(horas)
            minuto_num = int(minutos)
            
            # Validar rango militar (00:00 a 23:59)
            if 0 <= hora_num <= 23 and 0 <= minuto_num <= 59:
                resultado = f"{hora_num:02d}:{minuto_num:02d}"
                print(f"‚úÖ Formato militar v√°lido: {resultado}")
                return resultado
            else:
                print(f"‚ùå Rango inv√°lido: {hora_str}")
                return None
        except Exception as e:
            print(f"‚ùå Error al procesar: {e}")
            return None
    else:
        print(f"‚ùå Formato inv√°lido: {hora_str}")
        return None

def convertir_a_militar(tiempo_12h):
    """
    Convertir formato 12 horas a militar
    """
    try:
        # Parsear el tiempo en formato 12 horas
        tiempo_obj = datetime.strptime(tiempo_12h, '%I:%M %p')
        # Convertir a formato militar
        return tiempo_obj.strftime('%H:%M')
    except Exception as e:
        print(f"‚ùå Error al convertir: {e}")
        return tiempo_12h

def probar_validaciones():
    """
    Probar diferentes casos de validaci√≥n
    """
    print("üß™ PRUEBAS DE FORMATO MILITAR")
    print("=" * 50)
    
    # Casos de prueba
    casos_prueba = [
        # Formato militar correcto
        ("00:00", "Medianoche"),
        ("06:30", "Ma√±ana"),
        ("12:00", "Mediod√≠a"),
        ("18:45", "Tarde"),
        ("23:59", "Noche"),
        
        # Formato 12 horas
        ("12:00 AM", "Medianoche 12h"),
        ("6:30 AM", "Ma√±ana 12h"),
        ("12:00 PM", "Mediod√≠a 12h"),
        ("6:45 PM", "Tarde 12h"),
        ("11:59 PM", "Noche 12h"),
        
        # Casos inv√°lidos
        ("24:00", "Hora inv√°lida"),
        ("12:60", "Minutos inv√°lidos"),
        ("25:30", "Hora fuera de rango"),
        ("abc", "Texto inv√°lido"),
        ("", "Vac√≠o"),
    ]
    
    resultados = []
    
    for hora, descripcion in casos_prueba:
        print(f"\nüìù Probando: {hora} ({descripcion})")
        resultado = validar_hora_militar(hora)
        resultados.append({
            'entrada': hora,
            'descripcion': descripcion,
            'resultado': resultado,
            'valido': resultado is not None
        })
    
    return resultados

def probar_segmentos():
    """
    Probar validaci√≥n de segmentos completos
    """
    print("\n\nüìã PRUEBAS DE SEGMENTOS")
    print("=" * 50)
    
    segmentos_prueba = [
        # Segmentos v√°lidos
        {
            'nombre': 'Turno Normal',
            'segmentos': [
                {'inicio': '08:00', 'fin': '16:00', 'tipo': 'NORMAL'}
            ]
        },
        {
            'nombre': 'Turno Festivo',
            'segmentos': [
                {'inicio': '08:00', 'fin': '12:00', 'tipo': 'NORMAL'},
                {'inicio': '12:00', 'fin': '18:00', 'tipo': 'FESTIVO'}
            ]
        },
        {
            'nombre': 'Turno Nocturno',
            'segmentos': [
                {'inicio': '22:00', 'fin': '06:00', 'tipo': 'NOCTURNO'}
            ]
        },
        
        # Segmentos con errores
        {
            'nombre': 'Turno con Error',
            'segmentos': [
                {'inicio': '08:00', 'fin': '16:00', 'tipo': 'NORMAL'},
                {'inicio': '16:00', 'fin': '25:00', 'tipo': 'FESTIVO'}  # Hora inv√°lida
            ]
        },
        {
            'nombre': 'Turno con Formato 12h',
            'segmentos': [
                {'inicio': '8:00 AM', 'fin': '4:00 PM', 'tipo': 'NORMAL'}
            ]
        }
    ]
    
    for turno in segmentos_prueba:
        print(f"\nüìã {turno['nombre']}:")
        
        errores = []
        for i, segmento in enumerate(turno['segmentos']):
            print(f"  Segmento {i+1}:")
            
            # Validar inicio
            inicio_valido = validar_hora_militar(segmento['inicio'])
            if inicio_valido:
                print(f"    ‚úÖ Inicio: {inicio_valido}")
            else:
                print(f"    ‚ùå Inicio inv√°lido: {segmento['inicio']}")
                errores.append(f"Segmento {i+1} inicio inv√°lido")
            
            # Validar fin
            fin_valido = validar_hora_militar(segmento['fin'])
            if fin_valido:
                print(f"    ‚úÖ Fin: {fin_valido}")
            else:
                print(f"    ‚ùå Fin inv√°lido: {segmento['fin']}")
                errores.append(f"Segmento {i+1} fin inv√°lido")
            
            # Validar tipo
            tipos_validos = ['NORMAL', 'FESTIVO', 'NOCTURNO', 'DOMINGO', 'EXTRA', 'COMPENSATORIO']
            if segmento['tipo'] in tipos_validos:
                print(f"    ‚úÖ Tipo: {segmento['tipo']}")
            else:
                print(f"    ‚ùå Tipo inv√°lido: {segmento['tipo']}")
                errores.append(f"Segmento {i+1} tipo inv√°lido")
        
        if errores:
            print(f"  ‚ùå Errores encontrados: {len(errores)}")
            for error in errores:
                print(f"    - {error}")
        else:
            print(f"  ‚úÖ Turno v√°lido")

def generar_reporte(resultados):
    """
    Generar reporte de resultados
    """
    print("\n\nüìä REPORTE DE RESULTADOS")
    print("=" * 50)
    
    total = len(resultados)
    validos = sum(1 for r in resultados if r['valido'])
    invalidos = total - validos
    
    print(f"Total de pruebas: {total}")
    print(f"‚úÖ V√°lidos: {validos}")
    print(f"‚ùå Inv√°lidos: {invalidos}")
    print(f"üìà Tasa de √©xito: {(validos/total)*100:.1f}%")
    
    print("\nüìù Detalles:")
    for resultado in resultados:
        estado = "‚úÖ" if resultado['valido'] else "‚ùå"
        print(f"{estado} {resultado['entrada']} ‚Üí {resultado['resultado']} ({resultado['descripcion']})")

def main():
    """
    Funci√≥n principal
    """
    print("üöÄ INICIANDO PRUEBAS DE FORMATO MILITAR")
    print("=" * 60)
    
    # Probar validaciones individuales
    resultados = probar_validaciones()
    
    # Probar segmentos completos
    probar_segmentos()
    
    # Generar reporte
    generar_reporte(resultados)
    
    print("\n\nüéØ RECOMENDACIONES:")
    print("=" * 50)
    print("1. ‚úÖ Usar siempre formato HH:MM (00:00 a 23:59)")
    print("2. ‚úÖ Validar entrada en frontend y backend")
    print("3. ‚úÖ Convertir autom√°ticamente formato 12h a 24h")
    print("4. ‚úÖ Usar regex espec√≠fico para validaci√≥n militar")
    print("5. ‚úÖ Mantener consistencia en toda la aplicaci√≥n")
    
    print("\n‚úÖ Pruebas completadas")

if __name__ == "__main__":
    main() 